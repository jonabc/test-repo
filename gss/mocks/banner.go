// Code generated by MockGen. DO NOT EDIT.
// Source: gss/banner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gss "github.com/jonabc/test-repo/gss"
	reflect "reflect"
	time "time"
)

// MockBannerService is a mock of BannerService interface
type MockBannerService struct {
	ctrl     *gomock.Controller
	recorder *MockBannerServiceMockRecorder
}

// MockBannerServiceMockRecorder is the mock recorder for MockBannerService
type MockBannerServiceMockRecorder struct {
	mock *MockBannerService
}

// NewMockBannerService creates a new mock instance
func NewMockBannerService(ctrl *gomock.Controller) *MockBannerService {
	mock := &MockBannerService{ctrl: ctrl}
	mock.recorder = &MockBannerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerService) EXPECT() *MockBannerServiceMockRecorder {
	return m.recorder
}

// AddBanner mocks base method
func (m *MockBannerService) AddBanner(ctx context.Context, t gss.BannerType, expAt *time.Time, msg string) (*gss.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBanner", ctx, t, expAt, msg)
	ret0, _ := ret[0].(*gss.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBanner indicates an expected call of AddBanner
func (mr *MockBannerServiceMockRecorder) AddBanner(ctx, t, expAt, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBanner", reflect.TypeOf((*MockBannerService)(nil).AddBanner), ctx, t, expAt, msg)
}

// DeleteBanner mocks base method
func (m *MockBannerService) DeleteBanner(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner
func (mr *MockBannerServiceMockRecorder) DeleteBanner(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockBannerService)(nil).DeleteBanner), ctx, id)
}

// UpdateBanner mocks base method
func (m *MockBannerService) UpdateBanner(ctx context.Context, b *gss.Banner) (*gss.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", ctx, b)
	ret0, _ := ret[0].(*gss.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBanner indicates an expected call of UpdateBanner
func (mr *MockBannerServiceMockRecorder) UpdateBanner(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockBannerService)(nil).UpdateBanner), ctx, b)
}

// GetBanner mocks base method
func (m *MockBannerService) GetBanner(ctx context.Context, id int) (*gss.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", ctx, id)
	ret0, _ := ret[0].(*gss.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner
func (mr *MockBannerServiceMockRecorder) GetBanner(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockBannerService)(nil).GetBanner), ctx, id)
}

// ListBanners mocks base method
func (m *MockBannerService) ListBanners(ctx context.Context, ids []int) ([]*gss.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBanners", ctx, ids)
	ret0, _ := ret[0].([]*gss.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBanners indicates an expected call of ListBanners
func (mr *MockBannerServiceMockRecorder) ListBanners(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBanners", reflect.TypeOf((*MockBannerService)(nil).ListBanners), ctx, ids)
}
