// Code generated by MockGen. DO NOT EDIT.
// Source: gss/word.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	gss "github.com/jonabc/test-repo/gss"
	reflect "reflect"
)

// MockWordService is a mock of WordService interface
type MockWordService struct {
	ctrl     *gomock.Controller
	recorder *MockWordServiceMockRecorder
}

// MockWordServiceMockRecorder is the mock recorder for MockWordService
type MockWordServiceMockRecorder struct {
	mock *MockWordService
}

// NewMockWordService creates a new mock instance
func NewMockWordService(ctrl *gomock.Controller) *MockWordService {
	mock := &MockWordService{ctrl: ctrl}
	mock.recorder = &MockWordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWordService) EXPECT() *MockWordServiceMockRecorder {
	return m.recorder
}

// ReverseWord mocks base method
func (m *MockWordService) ReverseWord(w *gss.Word) (*gss.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseWord", w)
	ret0, _ := ret[0].(*gss.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseWord indicates an expected call of ReverseWord
func (mr *MockWordServiceMockRecorder) ReverseWord(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseWord", reflect.TypeOf((*MockWordService)(nil).ReverseWord), w)
}
