// Code generated by protoc-gen-twirp v5.8.0, DO NOT EDIT.
// source: proto/hello_world_api.proto

package proto

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =======================
// HelloWorldAPI Interface
// =======================

type HelloWorldAPI interface {
	HelloName(context.Context, *NameRequest) (*NameResponse, error)

	ReverseName(context.Context, *NameRequest) (*NameResponse, error)
}

// =============================
// HelloWorldAPI Protobuf Client
// =============================

type helloWorldAPIProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewHelloWorldAPIProtobufClient creates a Protobuf client that implements the HelloWorldAPI interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewHelloWorldAPIProtobufClient(addr string, client HTTPClient) HelloWorldAPI {
	prefix := urlBase(addr) + HelloWorldAPIPathPrefix
	urls := [2]string{
		prefix + "HelloName",
		prefix + "ReverseName",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &helloWorldAPIProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &helloWorldAPIProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *helloWorldAPIProtobufClient) HelloName(ctx context.Context, in *NameRequest) (*NameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "github.go_sample_service")
	ctx = ctxsetters.WithServiceName(ctx, "HelloWorldAPI")
	ctx = ctxsetters.WithMethodName(ctx, "HelloName")
	out := new(NameResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldAPIProtobufClient) ReverseName(ctx context.Context, in *NameRequest) (*NameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "github.go_sample_service")
	ctx = ctxsetters.WithServiceName(ctx, "HelloWorldAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ReverseName")
	out := new(NameResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// HelloWorldAPI JSON Client
// =========================

type helloWorldAPIJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewHelloWorldAPIJSONClient creates a JSON client that implements the HelloWorldAPI interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewHelloWorldAPIJSONClient(addr string, client HTTPClient) HelloWorldAPI {
	prefix := urlBase(addr) + HelloWorldAPIPathPrefix
	urls := [2]string{
		prefix + "HelloName",
		prefix + "ReverseName",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &helloWorldAPIJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &helloWorldAPIJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *helloWorldAPIJSONClient) HelloName(ctx context.Context, in *NameRequest) (*NameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "github.go_sample_service")
	ctx = ctxsetters.WithServiceName(ctx, "HelloWorldAPI")
	ctx = ctxsetters.WithMethodName(ctx, "HelloName")
	out := new(NameResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldAPIJSONClient) ReverseName(ctx context.Context, in *NameRequest) (*NameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "github.go_sample_service")
	ctx = ctxsetters.WithServiceName(ctx, "HelloWorldAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ReverseName")
	out := new(NameResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// HelloWorldAPI Server Handler
// ============================

type helloWorldAPIServer struct {
	HelloWorldAPI
	hooks *twirp.ServerHooks
}

func NewHelloWorldAPIServer(svc HelloWorldAPI, hooks *twirp.ServerHooks) TwirpServer {
	return &helloWorldAPIServer{
		HelloWorldAPI: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *helloWorldAPIServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// HelloWorldAPIPathPrefix is used for all URL paths on a twirp HelloWorldAPI server.
// Requests are always: POST HelloWorldAPIPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const HelloWorldAPIPathPrefix = "/twirp/github.go_sample_service.HelloWorldAPI/"

func (s *helloWorldAPIServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "github.go_sample_service")
	ctx = ctxsetters.WithServiceName(ctx, "HelloWorldAPI")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/github.go_sample_service.HelloWorldAPI/HelloName":
		s.serveHelloName(ctx, resp, req)
		return
	case "/twirp/github.go_sample_service.HelloWorldAPI/ReverseName":
		s.serveReverseName(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *helloWorldAPIServer) serveHelloName(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveHelloNameJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveHelloNameProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *helloWorldAPIServer) serveHelloNameJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "HelloName")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(NameRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *NameResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.HelloWorldAPI.HelloName(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NameResponse and nil error while calling HelloName. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *helloWorldAPIServer) serveHelloNameProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "HelloName")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(NameRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *NameResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.HelloWorldAPI.HelloName(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NameResponse and nil error while calling HelloName. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *helloWorldAPIServer) serveReverseName(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReverseNameJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReverseNameProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *helloWorldAPIServer) serveReverseNameJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReverseName")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(NameRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *NameResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.HelloWorldAPI.ReverseName(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NameResponse and nil error while calling ReverseName. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *helloWorldAPIServer) serveReverseNameProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReverseName")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(NameRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *NameResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.HelloWorldAPI.ReverseName(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NameResponse and nil error while calling ReverseName. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *helloWorldAPIServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *helloWorldAPIServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *helloWorldAPIServer) PathPrefix() string {
	return HelloWorldAPIPathPrefix
}

var twirpFileDescriptor1 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x48, 0xcd, 0xc9, 0xc9, 0x8f, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0x89, 0x4f, 0x2c,
	0xc8, 0xd4, 0x03, 0x8b, 0x0a, 0x49, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0xa5, 0xe7, 0xc7,
	0x17, 0x27, 0xe6, 0x16, 0xe4, 0xa4, 0xc6, 0x17, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x2a, 0x29,
	0x72, 0x71, 0xfb, 0x25, 0xe6, 0xa6, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71,
	0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x1a,
	0x5c, 0x3c, 0x10, 0x25, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0x30, 0x65, 0x30, 0xae, 0xd1, 0x49, 0x46, 0x2e, 0x5e, 0x0f, 0x90, 0x03,
	0xc2, 0x41, 0xf6, 0x3b, 0x06, 0x78, 0x0a, 0x45, 0x71, 0x71, 0x82, 0x05, 0x40, 0x06, 0x08, 0xa9,
	0xea, 0xe1, 0x72, 0x86, 0x1e, 0x92, 0x1b, 0xa4, 0xd4, 0x08, 0x29, 0x83, 0xba, 0x23, 0x86, 0x8b,
	0x3b, 0x28, 0xb5, 0x2c, 0xb5, 0xa8, 0x38, 0x95, 0x06, 0xa6, 0x3b, 0xb1, 0x47, 0xb1, 0x82, 0xc3,
	0x2e, 0x89, 0x0d, 0x4c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xa6, 0xe0, 0x36, 0x61,
	0x01, 0x00, 0x00,
}
